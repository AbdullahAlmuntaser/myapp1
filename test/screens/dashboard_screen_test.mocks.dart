// Mocks generated by Mockito 5.4.6 from annotations
// in myapp/test/screens/dashboard_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:flutter/material.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i16;
import 'package:myapp/attendance_model.dart' as _i15;
import 'package:myapp/class_model.dart' as _i9;
import 'package:myapp/grade_model.dart' as _i18;
import 'package:myapp/providers/attendance_provider.dart' as _i14;
import 'package:myapp/providers/class_provider.dart' as _i8;
import 'package:myapp/providers/grade_provider.dart' as _i17;
import 'package:myapp/providers/student_provider.dart' as _i2;
import 'package:myapp/providers/subject_provider.dart' as _i10;
import 'package:myapp/providers/teacher_provider.dart' as _i6;
import 'package:myapp/providers/theme_provider.dart' as _i12;
import 'package:myapp/student_model.dart' as _i3;
import 'package:myapp/subject_model.dart' as _i11;
import 'package:myapp/teacher_model.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [StudentProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStudentProvider extends _i1.Mock implements _i2.StudentProvider {
  MockStudentProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Student> get students =>
      (super.noSuchMethod(
            Invocation.getter(#students),
            returnValue: <_i3.Student>[],
          )
          as List<_i3.Student>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> fetchStudents() =>
      (super.noSuchMethod(
            Invocation.method(#fetchStudents, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> searchStudents(String? query, {String? classId}) =>
      (super.noSuchMethod(
            Invocation.method(#searchStudents, [query], {#classId: classId}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> addStudent(_i3.Student? student) =>
      (super.noSuchMethod(
            Invocation.method(#addStudent, [student]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> updateStudent(_i3.Student? student) =>
      (super.noSuchMethod(
            Invocation.method(#updateStudent, [student]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> deleteStudent(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteStudent, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> checkEmailUnique(String? email, [int? currentStudentId]) =>
      (super.noSuchMethod(
            Invocation.method(#checkEmailUnique, [email, currentStudentId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TeacherProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTeacherProvider extends _i1.Mock implements _i6.TeacherProvider {
  MockTeacherProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.Teacher> get teachers =>
      (super.noSuchMethod(
            Invocation.getter(#teachers),
            returnValue: <_i7.Teacher>[],
          )
          as List<_i7.Teacher>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> fetchTeachers() =>
      (super.noSuchMethod(
            Invocation.method(#fetchTeachers, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addTeacher(_i7.Teacher? teacher) =>
      (super.noSuchMethod(
            Invocation.method(#addTeacher, [teacher]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateTeacher(_i7.Teacher? teacher) =>
      (super.noSuchMethod(
            Invocation.method(#updateTeacher, [teacher]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTeacher(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTeacher, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> searchTeachers(String? name, {String? subject}) =>
      (super.noSuchMethod(
            Invocation.method(#searchTeachers, [name], {#subject: subject}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ClassProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassProvider extends _i1.Mock implements _i8.ClassProvider {
  MockClassProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i9.SchoolClass> get classes =>
      (super.noSuchMethod(
            Invocation.getter(#classes),
            returnValue: <_i9.SchoolClass>[],
          )
          as List<_i9.SchoolClass>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> fetchClasses() =>
      (super.noSuchMethod(
            Invocation.method(#fetchClasses, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> searchClasses(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchClasses, [query]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addClass(_i9.SchoolClass? schoolClass) =>
      (super.noSuchMethod(
            Invocation.method(#addClass, [schoolClass]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateClass(_i9.SchoolClass? schoolClass) =>
      (super.noSuchMethod(
            Invocation.method(#updateClass, [schoolClass]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteClass(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteClass, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [SubjectProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubjectProvider extends _i1.Mock implements _i10.SubjectProvider {
  MockSubjectProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i11.Subject> get subjects =>
      (super.noSuchMethod(
            Invocation.getter(#subjects),
            returnValue: <_i11.Subject>[],
          )
          as List<_i11.Subject>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> fetchSubjects() =>
      (super.noSuchMethod(
            Invocation.method(#fetchSubjects, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> searchSubjects(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchSubjects, [query]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addSubject(_i11.Subject? subject) =>
      (super.noSuchMethod(
            Invocation.method(#addSubject, [subject]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateSubject(_i11.Subject? subject) =>
      (super.noSuchMethod(
            Invocation.method(#updateSubject, [subject]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteSubject(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSubject, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ThemeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeProvider extends _i1.Mock implements _i12.ThemeProvider {
  MockThemeProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.ThemeMode get themeMode =>
      (super.noSuchMethod(
            Invocation.getter(#themeMode),
            returnValue: _i13.ThemeMode.system,
          )
          as _i13.ThemeMode);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void toggleTheme(bool? isDarkMode) => super.noSuchMethod(
    Invocation.method(#toggleTheme, [isDarkMode]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AttendanceProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAttendanceProvider extends _i1.Mock
    implements _i14.AttendanceProvider {
  MockAttendanceProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i15.Attendance> get attendances =>
      (super.noSuchMethod(
            Invocation.getter(#attendances),
            returnValue: <_i15.Attendance>[],
          )
          as List<_i15.Attendance>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> fetchAttendances({
    String? date,
    int? classId,
    int? subjectId,
    int? teacherId,
    int? studentId,
    int? lessonNumber,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchAttendances, [], {
              #date: date,
              #classId: classId,
              #subjectId: subjectId,
              #teacherId: teacherId,
              #studentId: studentId,
              #lessonNumber: lessonNumber,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addAttendance(_i15.Attendance? attendance) =>
      (super.noSuchMethod(
            Invocation.method(#addAttendance, [attendance]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateAttendance(_i15.Attendance? attendance) =>
      (super.noSuchMethod(
            Invocation.method(#updateAttendance, [attendance]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAttendance(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAttendance, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  String getAttendanceStatus(int? studentId, String? date, int? lessonNumber) =>
      (super.noSuchMethod(
            Invocation.method(#getAttendanceStatus, [
              studentId,
              date,
              lessonNumber,
            ]),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.method(#getAttendanceStatus, [
                studentId,
                date,
                lessonNumber,
              ]),
            ),
          )
          as String);

  @override
  _i4.Future<void> setAttendanceStatus(
    int? studentId,
    int? classId,
    int? subjectId,
    int? teacherId,
    String? date,
    int? lessonNumber,
    String? status,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setAttendanceStatus, [
              studentId,
              classId,
              subjectId,
              teacherId,
              date,
              lessonNumber,
              status,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GradeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockGradeProvider extends _i1.Mock implements _i17.GradeProvider {
  MockGradeProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i18.Grade> get grades =>
      (super.noSuchMethod(
            Invocation.getter(#grades),
            returnValue: <_i18.Grade>[],
          )
          as List<_i18.Grade>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> fetchGrades() =>
      (super.noSuchMethod(
            Invocation.method(#fetchGrades, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addGrade(_i18.Grade? grade) =>
      (super.noSuchMethod(
            Invocation.method(#addGrade, [grade]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateGrade(_i18.Grade? grade) =>
      (super.noSuchMethod(
            Invocation.method(#updateGrade, [grade]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteGrade(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteGrade, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i18.Grade>> getGradesByStudent(int? studentId) =>
      (super.noSuchMethod(
            Invocation.method(#getGradesByStudent, [studentId]),
            returnValue: _i4.Future<List<_i18.Grade>>.value(<_i18.Grade>[]),
          )
          as _i4.Future<List<_i18.Grade>>);

  @override
  _i4.Future<List<_i18.Grade>> getGradesByClass(int? classId) =>
      (super.noSuchMethod(
            Invocation.method(#getGradesByClass, [classId]),
            returnValue: _i4.Future<List<_i18.Grade>>.value(<_i18.Grade>[]),
          )
          as _i4.Future<List<_i18.Grade>>);

  @override
  _i4.Future<List<_i18.Grade>> getGradesBySubject(int? subjectId) =>
      (super.noSuchMethod(
            Invocation.method(#getGradesBySubject, [subjectId]),
            returnValue: _i4.Future<List<_i18.Grade>>.value(<_i18.Grade>[]),
          )
          as _i4.Future<List<_i18.Grade>>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getAverageGradesBySubject() =>
      (super.noSuchMethod(
            Invocation.method(#getAverageGradesBySubject, []),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
